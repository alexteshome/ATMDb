{"version":3,"sources":["components/Navbar.js","components/MovieList.js","actions/getMovies.js","actions/types.js","components/MovieDetails.js","reducers/index.js","reducers/moviesReducer.js","reducers/errorReducer.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","Menu","inverted","size","fixed","Container","Item","header","as","Link","to","MovieList","this","props","getMovies","prevProps","popMovies","map","movie","index","Grid","Column","color","style","padding","key","Image","src","poster_path","id","undefined","error","textAlign","marginTop","console","log","message","Dimmer","active","Loader","doubling","columns","paddingTop","posterRows","Component","withRouter","connect","state","movies","API_Key","dispatch","a","async","fetch","movieListRaw","movieList","json","fetchPopMovies","then","res","type","payload","results","catch","err","MovieDetails","parts","match","url","split","urlId","pop","selectedMovie","find","parseInt","Segment","padded","raised","Group","Content","fontSize","Header","original_title","Meta","fontWeight","release_date","Description","overview","Extra","Label","vote_average","combineReducers","action","store","createStore","rootReducer","compose","applyMiddleware","thunk","App","height","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.07ba4648.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Menu } from \"semantic-ui-react\";\r\n\r\nconst Navbar = () => (\r\n  <Menu inverted size=\"massive\" fixed=\"top\">\r\n    <Container>\r\n      <Menu.Item header>ATMDb</Menu.Item>\r\n      <Menu.Item as={Link} to=\"/\">\r\n        Home\r\n      </Menu.Item>\r\n    </Container>\r\n  </Menu>\r\n);\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { Grid, Image, Dimmer, Loader } from \"semantic-ui-react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getMovies } from \"../actions/getMovies\";\r\n\r\nclass MovieList extends Component {\r\n  componentDidMount() {\r\n    this.props.getMovies();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.popMovies !== this.props.popMovies) {\r\n      this.props.getMovies();\r\n    }\r\n  }\r\n\r\n  posterRows() {\r\n    return this.props.popMovies.map((movie, index) => {\r\n      return (\r\n        <Grid.Column color=\"black\" style={{ padding: 0 }} key={index}>\r\n          <Image\r\n            src={`http://image.tmdb.org/t/p/w500/${movie.poster_path}`}\r\n            as={Link}\r\n            to={`${movie.id}`}\r\n          />\r\n        </Grid.Column>\r\n      );\r\n    });\r\n  }\r\n  render() {\r\n    if (this.props.popMovies === undefined) {\r\n      return (\r\n        <div>\r\n          {this.props.error ? (\r\n            <h1 style={{ textAlign: \"center\", marginTop: \"100px\" }}>\r\n              {console.log(this.props.error)}\r\n              {this.props.error.message}\r\n            </h1>\r\n          ) : (\r\n            <Dimmer active>\r\n              <Loader size=\"massive\" />\r\n            </Dimmer>\r\n          )}\r\n        </div>\r\n      );\r\n    } else if (this.props.error) {\r\n      return (\r\n        <Grid doubling columns={5} style={{ marginTop: \"50px\", paddingTop: 0 }}>\r\n          {this.posterRows()}\r\n        </Grid>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  popMovies: state.movies.popMovies,\r\n  error: state.error\r\n});\r\n\r\nexport default withRouter(\r\n  connect(\r\n    mapStateToProps,\r\n    { getMovies }\r\n  )(MovieList)\r\n);\r\n","import { GET_MOVIES, GET_ERRORS } from \"./types\";\r\n\r\nconst fetchPopMovies = async () => {\r\n  const API_Key = \"6c741e9f6eef00067e5bc6af8c6b9e01\";\r\n  const movieListRaw = await fetch(\r\n    `https://api.themoviedb.org/3/discover/movie?api_key=${API_Key}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`\r\n  );\r\n  const movieList = movieListRaw.json();\r\n  return movieList;\r\n};\r\n\r\nexport const getMovies = API_Key => dispatch => {\r\n  fetchPopMovies(API_Key)\r\n    .then(res => {\r\n      dispatch({\r\n        type: GET_MOVIES,\r\n        payload: res.results\r\n      });\r\n    })\r\n    .catch(err => {\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err\r\n      });\r\n    });\r\n};\r\n","export const GET_MOVIES = \"GET_MOVIES\";\r\nexport const GET_ERRORS = \"GET_ERRORS\";\r\n","import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Segment, Container, Item, Label } from \"semantic-ui-react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass MovieDetails extends Component {\r\n  render() {\r\n    if (this.props.popMovies === undefined) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n    let parts = this.props.match.url.split(\"/\");\r\n    const urlId = parts.pop() || parts.pop();\r\n    const selectedMovie = this.props.popMovies.find(\r\n      movie => movie.id === parseInt(urlId)\r\n    );\r\n\r\n    return (\r\n      <Container style={{ marginTop: \"50px\", padding: \"50px\" }}>\r\n        <Segment padded=\"very\" raised>\r\n          <Item.Group>\r\n            <Item>\r\n              <Item.Image\r\n                src={`http://image.tmdb.org/t/p/w185/${\r\n                  selectedMovie.poster_path\r\n                }`}\r\n              />\r\n\r\n              <Item.Content style={{ fontSize: \"1.25em\" }}>\r\n                <Item.Header as=\"a\">{selectedMovie.original_title}</Item.Header>\r\n                <Item.Meta style={{ fontWeight: \"bold\" }}>\r\n                  ({selectedMovie.release_date.split(\"-\")[0]})\r\n                </Item.Meta>\r\n                <Item.Description>{selectedMovie.overview}</Item.Description>\r\n                <Item.Extra>\r\n                  <Label size=\"large\" color=\"blue\">\r\n                    {selectedMovie.vote_average}/10\r\n                  </Label>\r\n                </Item.Extra>\r\n              </Item.Content>\r\n            </Item>\r\n          </Item.Group>\r\n        </Segment>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  popMovies: state.movies.popMovies\r\n});\r\n\r\nexport default connect(mapStateToProps)(MovieDetails);\r\n","import { combineReducers } from \"redux\";\r\nimport moviesReducer from \"./moviesReducer\";\r\nimport errorReducer from \"./errorReducer\";\r\n\r\nexport default combineReducers({\r\n  movies: moviesReducer,\r\n  error: errorReducer\r\n});\r\n","import { GET_MOVIES } from \"../actions/types\";\r\n\r\nexport default function(state = {}, action) {\r\n  switch (action.type) {\r\n    case GET_MOVIES:\r\n      return {\r\n        ...state,\r\n        popMovies: action.payload.map(movie => {\r\n          return {\r\n            id: movie.id,\r\n            original_title: movie.original_title,\r\n            poster_path: movie.poster_path,\r\n            overview: movie.overview,\r\n            vote_average: movie.vote_average,\r\n            release_date: movie.release_date\r\n          };\r\n        })\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { GET_ERRORS } from \"../actions/types\";\r\n\r\nexport default function(state = {}, action) {\r\n  switch (action.type) {\r\n    case GET_ERRORS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst inititalState = {};\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  inititalState,\r\n  compose(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport MovieList from \"./components/MovieList\";\r\nimport MovieDetails from \"./components/MovieDetails\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div style={{ height: \"100%\" }}>\r\n        <Router basename=\"/movies\">\r\n          <Navbar />\r\n          <Switch>\r\n            <Route exact path=\"/\" component={MovieList} />\r\n            <Route exact path=\"/:movie\" component={MovieDetails} />\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}